generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  firstName     String
  lastName      String
  username      String        @unique
  password      String
  createdAt     DateTime      @default(now())
  tokenVersion  Int           @default(1)
  posts         Post[]
  followedBy    User[]        @relation("UserFollows")
  following     User[]        @relation("UserFollows")
  likedPosts    PostLike[]
  comments      Comment[]
  likedComments CommentLike[]
}

model Post {
  id        String     @id @default(uuid())
  content   String
  createdAt DateTime   @unique @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  likedBy   PostLike[]
  comments  Comment[]
}

model PostLike {
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([postId, userId])
}

model Comment {
  id        Int           @id @default(autoincrement())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  content   String?
  postId    String
  post      Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId  String?
  author    User?         @relation(fields: [authorId], references: [id], onDelete: SetNull)
  replyToId Int?
  replyTo   Comment?      @relation("CommentReply", fields: [replyToId], references: [id])
  replies   Comment[]     @relation("CommentReply")
  likes     CommentLike[]
}

model CommentLike {
  commentId Int
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([commentId, userId])
}
